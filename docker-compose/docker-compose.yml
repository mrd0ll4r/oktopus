version: '3.8'
services:
  # A busybox container to easily launch a shell within the network.
  shell:
    image: "busybox:latest"

  basic_depends_dummy:
    profiles:
      - "no_run"
    image: "busybox:latest"
    depends_on: &basic_depends
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      db:
        condition: service_healthy

  daemon01_depends_dummy:
    profiles:
      - "no_run"
    image: "busybox:latest"
    depends_on: &daemon_01_depends
      <<: *basic_depends
      daemon01:
        condition: service_healthy
  
  daemon02_depends_dummy:
    profiles:
      - "no_run"
    image: "busybox:latest"
    depends_on: &daemon_02_depends
      <<: *basic_depends
      daemon02:
        condition: service_healthy

  basic_worker_dummy: &basic_worker
    profiles:
      - "no_run"
    image: "busybox:latest"
    restart: unless-stopped
    expose:
      - 8088
    depends_on:
      <<: *basic_depends
    volumes:
      - ./.env:/ipfs-indexer/.env
    environment:
      - RUST_LOG=info
      - RUST_BACKTRACE=full

  daemon01_worker_dummy: &daemon01_worker
    <<: *basic_worker
    command:
      - "--daemon"
      - "http://daemon01:5001"
    depends_on:
      <<: *daemon_01_depends
    links:
      - rabbitmq
      - redis
      - db
      - prometheus
      - daemon01

  daemon02_worker_dummy: &daemon02_worker
    <<: *basic_worker
    command:
      - "--daemon"
      - "http://daemon02:5001"
    depends_on:
      <<: *daemon_02_depends
    links:
      - rabbitmq
      - redis
      - db
      - prometheus
      - daemon02

  db:
    image: "postgres:14"
    command: postgres -c shared_buffers=512MB -c work_mem=16MB -c max_connections=200
    restart: unless-stopped
    # Healthcheck from https://stackoverflow.com/questions/46516584/docker-check-if-postgres-is-ready
    healthcheck:
      test: /usr/bin/pg_isready -U postgres
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./init_db.sh:/docker-entrypoint-initdb.d/001_init_ipfs_db.sh
    environment:
      - POSTGRES_PASSWORD=coolipfsstuff321
    ports:
      # We probably don't want to expose our db to the internet, so localhost-only.
      # This allows us to inspect the database from the host.
      - "127.0.0.1:5433:5432"
    shm_size: 512MB

  redis:
    image: "redis:7"
    restart: unless-stopped
    volumes:
      - ./redis.conf:/usr/local/etc/redis/redis.conf

  rabbitmq:
    image: "rabbitmq:3.12"
    restart: unless-stopped
    hostname: rmq
    expose:
      - 15692
    # Healthcheck from https://devops.stackexchange.com/questions/12092/docker-compose-healthcheck-for-rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q status
      interval: 30s
      timeout: 30s
      retries: 3
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - rabbitmq_data:/var/lib/rabbitmq/mnesia/rabbit@rmq
      - rabbitmq_logs:/var/log/rabbitmq/log
    ports:
      # AMQP, so we can post CIDs to RabbitMQ from the host.
      # We probably don't want this exposed on the internet.
      - "127.0.0.1:5672:5672"

  cid_worker:
    <<: *basic_worker
    profiles: []
    image: "ipfs-indexer-cid-worker:latest"

  daemon01:
    image: "ipfs/kubo:v0.22.0"
    command: daemon --migrate=true --agent-version-suffix=docker --enable-gc
    restart: unless-stopped
    volumes:
      - ipfs_01_path:/data/ipfs
      - ./001_configure_ipfs.sh:/container-init.d/001_configure_ipfs.sh
    ports:
      # Swarm listens on all interfaces, so is remotely reachable.
      - "4001:4001/tcp"
      - "4001:4001/udp"
      # API port, which includes admin operations, so you probably don't want this remotely accessible.
      - "127.0.0.1:5001:5001"

  daemon02:
    image: "ipfs/kubo:v0.22.0"
    command: daemon --migrate=true --agent-version-suffix=docker --enable-gc
    restart: unless-stopped
    volumes:
      - ipfs_02_path:/data/ipfs
      - ./001_configure_ipfs.sh:/container-init.d/001_configure_ipfs.sh
      - ./002_configure_second_daemon_addresses.sh:/container-init.d/002_configure_second_daemon_addresses.sh
    ports:
      # Swarm listens on all interfaces, so is remotely reachable.
      - "4002:4002/tcp"
      - "4002:4002/udp"
      # API port, which includes admin operations, so you probably don't want this remotely accessible.
      - "127.0.0.1:5002:5001"

  block_worker_daemon01:
    <<: *daemon01_worker
    profiles: []
    image: "ipfs-indexer-block-worker:latest"

  block_worker_daemon02:
    <<: *daemon02_worker
    profiles: []
    image: "ipfs-indexer-block-worker:latest"

  directory_worker_daemon01:
    <<: *daemon01_worker
    profiles: []
    image: "ipfs-indexer-directory-worker:latest"

  directory_worker_daemon02:
    <<: *daemon02_worker
    profiles: []
    image: "ipfs-indexer-directory-worker:latest"

  hamtshard_worker_daemon01:
    <<: *daemon01_worker
    profiles: []
    image: "ipfs-indexer-hamtshard-worker:latest"

  hamtshard_worker_daemon02:
    <<: *daemon02_worker
    profiles: []
    image: "ipfs-indexer-hamtshard-worker:latest"

  file_worker_daemon01:
    <<: *daemon01_worker
    profiles: []
    image: "ipfs-indexer-file-worker:latest"
    command:
      - "--daemon"
      - "http://daemon01:5001"
      - "--gateway"
      - "http://daemon01:8080"
    volumes:
      - ./.env:/ipfs-indexer/.env
      - ./worker_01_temp_file_storage:/ipfs-indexer/tmp

  file_worker_daemon02:
    <<: *daemon02_worker
    profiles: []
    image: "ipfs-indexer-file-worker:latest"
    command:
      - "--daemon"
      - "http://daemon02:5001"
      - "--gateway"
      - "http://daemon02:8080"
    volumes:
      - ./.env:/ipfs-indexer/.env
      - ./worker_02_temp_file_storage:/ipfs-indexer/tmp

  grafana:
    # https://hub.docker.com/r/grafana/grafana/tags
    image: grafana/grafana:8.3.4
    restart: unless-stopped
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/rabbitmq.yaml
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/prometheus.yaml
      - ./grafana/dashboards:/dashboards
    environment:
      # https://grafana.com/plugins/flant-statusmap-panel
      # https://grafana.com/plugins/grafana-piechart-panel
      # https://grafana.com/plugins/grafana-polystat-panel
      # https://grafana.com/plugins/jdbranham-diagram-panel
      # https://grafana.com/plugins/michaeldmoore-multistat-panel
      # https://grafana.com/plugins/vonage-status-panel
      # https://grafana.com/plugins/yesoreyeram-boomtable-panel
      GF_INSTALL_PLUGINS: "flant-statusmap-panel,grafana-piechart-panel"

  prometheus:
    # https://hub.docker.com/r/prom/prometheus/tags
    image: prom/prometheus:latest
    restart: unless-stopped
    expose:
      - 9090
    #ports:
    #  - "127.0.0.1:9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml

  node-exporter:
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    # https://hub.docker.com/r/prom/node-exporter/tags
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

volumes:
  prometheus_data:
  grafana_data:
  ipfs_01_path:
  ipfs_02_path:
  pg_data:
  rabbitmq_data:
  rabbitmq_logs:
